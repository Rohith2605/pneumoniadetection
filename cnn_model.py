# -*- coding: utf-8 -*-
"""CNN model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_zL8aMcVVOg5Slf6qsSkUUicYrYex6KF
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from tensorflow.keras.optimizers import Adam
import cv2
from keras.preprocessing.image import img_to_array

from google.colab import drive
drive.mount('/content/drive')

"""**Creating the train data generator.**"""

train_datagen = ImageDataGenerator(rescale = 1./255,
shear_range = 0.2,
zoom_range = 0.2,
horizontal_flip = True)

"""**Training data which is present in drive.**"""

train_images = "/content/drive/MyDrive/chest_xray/chest_xray/ctscan/train"

train_generator = train_datagen.flow_from_directory(train_images,
    target_size = (300,300),
    batch_size = 128,
    class_mode = 'binary')

"""**Model outputs :**

0 : Normal condition

1 : Pneumonia condition
"""

train_generator.class_indices

"""**Validation data generator and loading validation data**"""

test_datagen = ImageDataGenerator(rescale = 1./255)
validation_generator = test_datagen.flow_from_directory('/content/drive/MyDrive/chest_xray/chest_xray/ctscan/val',
    target_size= (300,300),
    batch_size = 128,
    class_mode = 'binary')

"""**Plotting :** Images with Pneumonia from dataset."""

#Pneumonia
plot_image = plt.figure(figsize=(10,10))

plot1 = plot_image.add_subplot(3,2,1)
plot2 = plot_image.add_subplot(3,2,2)
plot3 = plot_image.add_subplot(3,2,3)
plot4 = plot_image.add_subplot(3,2,4)
plot5 = plot_image.add_subplot(3,2,5)
plot6 = plot_image.add_subplot(3,2,6)
plot1.matshow(plt.imread(train_generator.filepaths[41]))
plot2.matshow(plt.imread(train_generator.filepaths[17]))
plot3.matshow(plt.imread(train_generator.filepaths[15]))
plot4.matshow(plt.imread(train_generator.filepaths[54]))
plot5.matshow(plt.imread(train_generator.filepaths[79]))
plot6.matshow(plt.imread(train_generator.filepaths[10]))

"""**Plotting :** Images without Pneumonia from dataset."""

#Normal
plot_image = plt.figure(figsize=(10,10))

plot1 = plot_image.add_subplot(3,2,1)
plot2 = plot_image.add_subplot(3,2,2)
plot3 = plot_image.add_subplot(3,2,3)
plot4 = plot_image.add_subplot(3,2,4)
plot5 = plot_image.add_subplot(3,2,5)
plot6 = plot_image.add_subplot(3,2,6)
plot1.matshow(plt.imread(train_generator.filepaths[54]))
plot2.matshow(plt.imread(train_generator.filepaths[33]))
plot3.matshow(plt.imread(train_generator.filepaths[44]))
plot4.matshow(plt.imread(train_generator.filepaths[13]))
plot5.matshow(plt.imread(train_generator.filepaths[88]))
plot6.matshow(plt.imread(train_generator.filepaths[79]))

model= tf.keras.models.Sequential([
                                   tf.keras.layers.Conv2D(16, (3,3), activation= 'relu', input_shape= (300, 300, 3)),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(32, (3,3), activation= 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(64, (3,3), activation= 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(128, (3,3), activation= 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),
                                   tf.keras.layers.Conv2D(128, (3,3), activation= 'relu'),
                                   tf.keras.layers.MaxPool2D(2,2),

                                   tf.keras.layers.Flatten(),
                                   tf.keras.layers.Dense(256, activation= 'relu'),
                                   tf.keras.layers.Dense(512, activation= 'relu'),
                                   tf.keras.layers.Dense(1, activation= 'sigmoid')
])
model.summary()
model.compile(optimizer= 'adam', loss= 'binary_crossentropy', metrics= ['accuracy'])

"""[link text](https://)**Training the model for 15 epochs**"""

history = model.fit(train_generator, epochs = 15, validation_data = validation_generator)

"""<h2>Accuracy : 98.16%</h2>

<h2>Val_accuracy : 100%</h2>

**<h3>Plotting Loss Vs Num. of Epochs</h3>**
"""

loss = history.history['loss']
val_loss = history.history['val_loss']
plt.figure(figsize=(15, 10))
plt.plot(loss)
plt.plot(val_loss)
plt.legend(['Training loss','Validation loss'], fontsize=16)
plt.title("Loss Vs Epochs", fontsize=18)
plt.xlabel("Num. of Epochs", fontsize=16)
plt.ylabel("Loss", fontsize=16)
print("Loss Vs Num. of Epochs")
print("Training Loss : 0.0519","\nValue loss : 0.0701")
plt.show()

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

"""**<h3>Plotting Accuracy Vs Num. of Epochs</h3>**"""

plt.figure(figsize=(15, 10))
plt.plot(acc)
plt.plot(val_acc)
plt.legend(['Training accuracy','Validation accuracy'], fontsize=16)
plt.title("Accuracy Vs Epochs", fontsize=18)
plt.xlabel("Num. of Epochs", fontsize=16)
plt.ylabel("Accuracy", fontsize=16)
print("Accuracy Vs Epochs")
print("Training accuracy : 0.9816","\nValue accuracy : 1.0000")
plt.show()

"""<h3>Saving the model</h3>"""

model.save("trained4.h5")

"""<h3>Loading the saved model so that we can load the model which is already saved so lot of time can be saved and it can also be used for deployment.</h3>"""

from keras.models import load_model
model = load_model("trained4.h5")

"""**Loading the test data generator from drive**"""

eval_datagen = ImageDataGenerator(rescale = 1/255)

test_generator = eval_datagen.flow_from_directory(
    '/content/drive/MyDrive/chest_xray/chest_xray/ctscan/test',
    target_size = (300, 300),
    batch_size = 128,
    class_mode = 'binary'
)

eval_result = model.evaluate_generator(test_generator, 624)
print('loss :', eval_result[0])
print('accuracy :', eval_result[1])

"""The accuracy of test data is : <h3>92.1%</h3>

**An image is used from drive for prediction**
"""

img= cv2.imread('/content/drive/MyDrive/general_test/n3.jpg')
tempimg = img
img = cv2.resize(img,(300,300))
img = img/255.0
img = img.reshape(1,300,300,3)
model.predict(img)

"""The prediction shows value as **0.01** which is less than 0.5

so our model has to predict it as Normal which is done below.
"""

prediction = model.predict(img) >= 0.5
if prediction>=0.5:
  prediction = "Pneumonia"
else:
  prediction = "Normal"
print("Prediction: "+prediction)
plt.imshow(tempimg)
plt.title("Prediction: "+prediction, fontsize=14)

img= cv2.imread('/content/drive/MyDrive/general_test/p1.jpg')
tempimg = img
img = cv2.resize(img,(300,300))
img = img/255.0
img = img.reshape(1,300,300,3)
model.predict(img)

prediction = model.predict(img) >= 0.5
if prediction>=0.5:
  prediction = "Pneumonia"
else:
  prediction = "Normal"
print("Prediction: "+prediction)
plt.imshow(tempimg)
plt.title("Prediction: "+prediction, fontsize=14)

from google.colab import files
files.download('trained4.h5')